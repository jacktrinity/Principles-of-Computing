Week 3 of "Principles of Computing"

Question 1
Which term refers to the set of possible outcomes associated with a trial?
- Sample Space

Question 2
Single trials 
You are dealt a single card from a standard deck of 52 playings cards (4 suits with 13 cards in each suit).  
What is the probability that the card will be of a specific suit?
- 0.25

Question 3
Consider a trial with 3636 possible outcomes where each outcome has equal probability.  
How many outcomes correspond to an event that has probability 1/9?
- 4

Question 4
Which Python expressions below simulate a single trial corresponding to the roll of a fair six-sided die whose faces are numbered 1 to 6?
- random.randrange(6) + 1
- random.randrange(1, 7)

Question 5
Given a standard deck of 52 cards, what is the probability that two cards drawn at random will have the same rank? 
Note that first card drawn is not added back into the deck when the second card is drawn.
- 1/17

Question 6
Expected value
What is the mean GPA of class where 30% of the students have 4.0 GPA, 40% of the students have a 3.0 GPA and 20% of the students have 2.0 GPA, 
and 10% of the student have a 1.0 GPA?
- 2.9

Question 7
Consider a dice game in which you roll two dice.  
If the sum of the dice is odd, you win $1.  
If the sum of the dice is even, you lose $1.  
What is the expected value (in terms of your winnings) of a single roll in this game?
- The expected value is zero. If I play this game a lot, I expect to break even.

Question 8
What is the expected value of trial(n) as a function of n? (Here, assume that n is a positive integer.) 
def trial(n):
    val = random.randrange(n)
    return val
    
- (n - 1)/2

Question 9
""" 
Program that computes mystery number
"""


import math
import random

def inside_unit_circle(point):
    """
    Compute distance of point from origin
    """
    distance = math.sqrt(point[0] ** 2 + point[1] ** 2)
    return distance < 1
                                                 

def estimate_mystery(num_trials):
    """
    Main function
    """
    num_inside = 0
    
    for dumm_idx in range(num_trials):
        new_point = [2 * random.random() - 1, 2 * random.random() - 1]
        if inside_unit_circle(new_point):
            num_inside += 1
    
    return float(num_inside) / num_trials

print estimate_mystery(10000)

- pi/4

            
